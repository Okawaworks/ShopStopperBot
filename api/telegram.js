const { OpenAI } = require("openai");
const fetch = (...args) => import("node-fetch").then(({ default: fetch }) => fetch(...args));

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_SECRET = process.env.TELEGRAM_WEBHOOK_SECRET;

const sessions = new Map();

const personas = {
  strict: "–¢—ã ‚Äî –∂—ë—Å—Ç–∫–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ—É—á. –ì–æ–≤–æ—Ä–∏ —Ç–≤—ë—Ä–¥–æ. –ë–µ–∑ –ø–æ—â–∞–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ '–û—á–Ω–∏—Å—å', '–•–≤–∞—Ç–∏—Ç —Ç—Ä–∞—Ç–∏—Ç—å', '–≠—Ç–æ –ª–æ–≤—É—à–∫–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞'.",
  soft: "–¢—ã ‚Äî –¥–æ–±—Ä—ã–π –¥—Ä—É–≥. –ü–æ–º–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–ø–∞—Ç–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ –Ω–µ –ø–æ–¥–¥–∞–∫–∏–≤–∞–π.",
  troll: "–¢—ã ‚Äî –¥–µ—Ä–∑–∫–∏–π —Ç—Ä–æ–ª–ª—å. –°–∞—Ä–∫–∞–∑–º, –Ω–∞—Å–º–µ—à–∫–∏, –¥–æ–±—Ä—ã–µ –ø–æ–¥–∫–æ–ª—ã. –í—ã—Å–º–µ–∏–≤–∞–π –∂–µ–ª–∞–Ω–∏–µ –∫—É–ø–∏—Ç—å —Å —é–º–æ—Ä–æ–º.",
  wise: "–¢—ã ‚Äî –¥–∑–µ–Ω-—Ñ–∏–ª–æ—Å–æ—Ñ. –ü–æ–º–æ–≥–∏ —É–≤–∏–¥–µ—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è. –ì–æ–≤–æ—Ä–∏ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏ –∏ –ø–∞—Ä–∞–¥–æ–∫—Å–∞–º–∏."
};

module.exports = async (req, res) => {
  if (req.method !== "POST" || req.query.secret !== WEBHOOK_SECRET) {
    return res.status(403).send("Forbidden");
  }

  const message = req.body?.message?.text;
  const chatId = req.body?.message?.chat?.id?.toString();

  if (!message || !chatId) return res.status(400).send("Bad Request");

  const command = message.trim().toLowerCase();

  if (!sessions.has(chatId)) {
    sessions.set(chatId, {
      persona: "soft",
      messages: [],
      totalSaved: 0,
      relapses: 0,
      totalSavedAmount: 0,
      pendingPrice: false
    });
  }

  const session = sessions.get(chatId);

  // === PRICE ENTRY ===
  if (session.pendingPrice) {
    const price = parseFloat(message.replace(/[^\d.]/g, ""));
    if (!isNaN(price)) {
      session.totalSavedAmount += price;
      session.pendingPrice = false;
      await sendMessage(chatId, `üí∞ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª: —Ç—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª ${price} ‚ÇΩ.`);
    } else {
      await sendMessage(chatId, "–ù–µ –ø–æ–Ω—è–ª, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏–ª–∞ –≤–µ—â—å? –ù–∞–ø–∏—à–∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 999");
    }
    return res.status(200).send("ok");
  }

  // === COMMANDS ===
  if (command === "/start") {
    await sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –¥–µ–ª–∞—Ç—å –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å.");
    return res.status(200).send("ok");
  }

  if (command === "/done") {
    session.totalSaved += 1;
    session.messages = [];
    session.pendingPrice = true;
    await sendMessage(chatId, "üëè –ú–æ–ª–æ–¥–µ—Ü! –ê —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏–ª–∞ —ç—Ç–∞ –≤–µ—â—å?");
    return res.status(200).send("ok");
  }

  if (command === "/buy" || command === "/—è –∫—É–ø–∏–ª") {
    session.relapses += 1;
    session.messages = [];
    await sendMessage(chatId, "üòî –ü–æ–Ω–∏–º–∞—é. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–ø—Ä–∞–≤–∏–º—Å—è –≤–º–µ—Å—Ç–µ!");
    return res.status(200).send("ok");
  }

  if (command === "/persona") {
    await sendMessage(chatId, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:
/strict ‚Äî —Å—Ç—Ä–æ–≥–∏–π
/soft ‚Äî –º—è–≥–∫–∏–π
/troll ‚Äî —Ç—Ä–æ–ª–ª—å
/wise ‚Äî –º—É–¥—Ä–µ—Ü");
    return res.status(200).send("ok");
  }

  if (["/strict", "/soft", "/troll", "/wise"].includes(command)) {
    session.persona = command.replace("/", "");
    await sendMessage(chatId, `‚úÖ –°—Ç–∏–ª—å —Å–º–µ–Ω—ë–Ω –Ω–∞: ${session.persona}`);
    return res.status(200).send("ok");
  }

  if (command === "/stats") {
    await sendMessage(
      chatId,
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚úÖ –£–¥–µ—Ä–∂–∞–ª—Å—è: ${session.totalSaved} —Ä–∞–∑(–∞)
üí∏ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${session.totalSavedAmount} ‚ÇΩ
üòÖ –ü–æ–¥–¥–∞–ª—Å—è: ${session.relapses} —Ä–∞–∑(–∞)`
    );
    return res.status(200).send("ok");
  }

  // === CONVERSATION ===
  const personaPrompt = personas[session.persona];
  if (session.messages.length === 0) {
    session.messages.push({ role: "user", content: `–•–æ—á—É –∫—É–ø–∏—Ç—å: ${message}` });
  } else {
    session.messages.push({ role: "user", content: message });
  }

  const fullPrompt = [{ role: "system", content: personaPrompt }, ...session.messages];

  const completion = await openai.chat.completions.create({
    model: "gpt-4o",
    messages: fullPrompt
  });

  const reply = completion.choices[0].message?.content ?? "ü§î –•–º...";
  session.messages.push({ role: "assistant", content: reply });

  await sendMessage(chatId, reply);
  res.status(200).send("ok");
};

async function sendMessage(chatId, text) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text })
  });
}
