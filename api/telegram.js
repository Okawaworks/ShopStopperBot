const { Configuration, OpenAI } = require("openai");
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_SECRET = process.env.TELEGRAM_WEBHOOK_SECRET;

const sessions = new Map();


const personas = {
  strict: "–¢—ã ‚Äî –∂—ë—Å—Ç–∫–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ—É—á. –¶–µ–ª—å: –æ—Ç–≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ —Å–∞–Ω—Ç–∏–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –ª–æ–≥–∏–∫—É, —Ü–∏—Ñ—Ä—ã, —Ñ–∞–∫—Ç—ã. –ë—É–¥—å –ø—Ä—è–º–æ–ª–∏–Ω–µ–µ–Ω.",
  soft: "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –º—è–≥–∫–∏–π –¥—Ä—É–≥. –ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–Ω—è—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∂–µ–ª–∞–Ω–∏—è –∫—É–ø–∏—Ç—å –≤–µ—â—å. –ê–∫—Ü–µ–Ω—Ç –Ω–∞ —ç–º–æ—Ü–∏—è—Ö –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö. –ë—É–¥—å –¥–æ–±—Ä, –Ω–æ —á–µ—Å—Ç–µ–Ω.",
  troll: "–¢—ã ‚Äî –¥–µ—Ä–∑–∫–∏–π, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–æ–ª–ª—å, –Ω–æ —Å —Å–µ—Ä–¥—Ü–µ–º. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –≤—ã—Å–º–µ—è—Ç—å –∏–º–ø—É–ª—å—Å–∏–≤–Ω—É—é –ø–æ–∫—É–ø–∫—É.",
  wise: "–¢—ã ‚Äî —Ñ–∏–ª–æ—Å–æ—Ñ. –ü–æ–º–æ–≥–∞–µ—à—å —É–≤–∏–¥–µ—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –∂–µ–ª–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ä–∞–¥–æ–∫—Å—ã, –æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è."
};

module.exports = async (req, res) => {
  try {
    const { searchParams } = new URL(req.url, "http://localhost");
    const secret = searchParams.get("secret");
    if (secret !== WEBHOOK_SECRET) return res.status(403).send("Forbidden");

    const body = req.body;
    const message = body?.message?.text;
    const chatId = body?.message?.chat?.id?.toString();

    if (!message || !chatId) return res.status(200).send("No message");

    const command = message.trim().toLowerCase();
    if (!sessions.has(chatId)) {
      sessions.set(chatId, { persona: "soft", messages: [], totalSaved: 0, relapses: 0 });
    }

    const session = sessions.get(chatId);

    if (command === "/start") {
      await sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –¥–µ–ª–∞—Ç—å –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å.");
      return res.status(200).send("ok");
    }

    if (command === "/done") {
      session.totalSaved += 1;
      session.messages = [];
      await sendMessage(chatId, "üëè –ú–æ–ª–æ–¥–µ—Ü! –ó–∞–ø–∏—Å–∞–ª ‚Äî —Ç—ã —É–¥–µ—Ä–∂–∞–ª—Å—è –æ—Ç –ø–æ–∫—É–ø–∫–∏.");
      return res.status(200).send("ok");
    }

    if (command === "/buy" || command === "/—è –∫—É–ø–∏–ª") {
      session.relapses += 1;
      session.messages = [];
      await sendMessage(chatId, "üòî –ü–æ–Ω–∏–º–∞—é. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–ø—Ä–∞–≤–∏–º—Å—è –≤–º–µ—Å—Ç–µ!");
      return res.status(200).send("ok");
    }

    if (command === "/persona") {
      await sendMessage(chatId, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:\n/strict ‚Äî —Å—Ç—Ä–æ–≥–∏–π\n/soft ‚Äî –º—è–≥–∫–∏–π\n/troll ‚Äî —Ç—Ä–æ–ª–ª—å\n/wise ‚Äî –º—É–¥—Ä–µ—Ü");
      return res.status(200).send("ok");
    }

    if (["/strict", "/soft", "/troll", "/wise"].includes(command)) {
      session.persona = command.replace("/", "");
      await sendMessage(chatId, `‚úÖ –°—Ç–∏–ª—å —Å–º–µ–Ω—ë–Ω –Ω–∞: ${session.persona}`);
      return res.status(200).send("ok");
    }

    if (command === "/stats") {
      await sendMessage(chatId, `üìä –¢—ã —É–¥–µ—Ä–∂–∞–ª—Å—è –æ—Ç ${session.totalSaved} –ø–æ–∫—É–ø–æ–∫\nüòÖ –ù–æ –ø–æ–¥–¥–∞–ª—Å—è ${session.relapses} —Ä–∞–∑(–∞)`);
      return res.status(200).send("ok");
    }

    const personaPrompt = personas[session.persona];
    if (session.messages.length === 0) {
      session.messages.push({ role: "user", content: `–•–æ—á—É –∫—É–ø–∏—Ç—å: ${message}` });
    } else {
      session.messages.push({ role: "user", content: message });
    }

    const fullPrompt = [
      { role: "system", content: personaPrompt },
      ...session.messages
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: fullPrompt
    });

    const reply = completion.choices[0].message.content || "ü§î –•–º...";
    session.messages.push({ role: "assistant", content: reply });

    await sendMessage(chatId, reply);
    return res.status(200).send("ok");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ Telegram handler:", err);
    return res.status(500).send("Internal Server Error");
  }
};

async function sendMessage(chatId, text) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text })
  });
}
