const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args))
const { OpenAI } = require("openai")

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const WEBHOOK_SECRET = process.env.TELEGRAM_WEBHOOK_SECRET

const sessions = new Map()

const personas = {
  strict: "–¢—ã ‚Äî –∂—ë—Å—Ç–∫–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ—É—á. –¶–µ–ª—å: –æ—Ç–≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ —Å–∞–Ω—Ç–∏–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –ª–æ–≥–∏–∫—É, —Ü–∏—Ñ—Ä—ã, —Ñ–∞–∫—Ç—ã. –ë—É–¥—å –ø—Ä—è–º–æ–ª–∏–Ω–µ–µ–Ω.",
  soft: "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –º—è–≥–∫–∏–π –¥—Ä—É–≥. –ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–Ω—è—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∂–µ–ª–∞–Ω–∏—è –∫—É–ø–∏—Ç—å –≤–µ—â—å. –ê–∫—Ü–µ–Ω—Ç –Ω–∞ —ç–º–æ—Ü–∏—è—Ö –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö. –ë—É–¥—å –¥–æ–±—Ä, –Ω–æ —á–µ—Å—Ç–µ–Ω.",
  troll: "–¢—ã ‚Äî –¥–µ—Ä–∑–∫–∏–π, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–æ–ª–ª—å, –Ω–æ —Å —Å–µ—Ä–¥—Ü–µ–º. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –≤—ã—Å–º–µ—è—Ç—å –∏–º–ø—É–ª—å—Å–∏–≤–Ω—É—é –ø–æ–∫—É–ø–∫—É. –®—É—Ç–∏, –ø–æ–¥–¥—Ä–∞–∑–Ω–∏, —Å—Ç–µ–±–∏—Å—å.",
  wise: "–¢—ã ‚Äî —Ñ–∏–ª–æ—Å–æ—Ñ. –ü–æ–º–æ–≥–∞–µ—à—å —É–≤–∏–¥–µ—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –∂–µ–ª–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ä–∞–¥–æ–∫—Å—ã, –æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å, –º–µ—Ç–∞—Ñ–æ—Ä—ã, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è."
}

module.exports = async function (req, res) {
  if (req.method !== 'POST' || req.query.secret !== WEBHOOK_SECRET) {
    return res.status(403).send('Forbidden')
  }

  const message = req.body?.message?.text
  const chatId = req.body?.message?.chat?.id?.toString()

  if (!message || !chatId) return res.status(400).send('Bad Request')

  const command = message.trim().toLowerCase()

  if (!sessions.has(chatId)) {
    sessions.set(chatId, {
      persona: 'soft',
      messages: [],
      totalSaved: 0,
      relapses: 0,
      savedMoney: 0
    })
  }

  const session = sessions.get(chatId)

  if (command === '/start') {
    await sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –¥–µ–ª–∞—Ç—å –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å.")
    return res.status(200).send('ok')
  }

  if (command === '/persona') {
    await sendMessage(chatId, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:\n/strict ‚Äî —Å—Ç—Ä–æ–≥–∏–π\n/soft ‚Äî –º—è–≥–∫–∏–π\n/troll ‚Äî —Ç—Ä–æ–ª–ª—å\n/wise ‚Äî –º—É–¥—Ä–µ—Ü")
    return res.status(200).send('ok')
  }

  if (['/strict', '/soft', '/troll', '/wise'].includes(command)) {
    session.persona = command.replace('/', '')
    await sendMessage(chatId, `‚úÖ –°—Ç–∏–ª—å —Å–º–µ–Ω—ë–Ω –Ω–∞: ${session.persona}`)
    return res.status(200).send('ok')
  }

  if (command === '/done') {
    session.totalSaved += 1
    session.messages = []
    await sendMessage(chatId, "üëè –ö—Ä—É—Ç–æ! –Ø –∑–Ω–∞–ª, —á—Ç–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è. –ó–∞–ø–∏—à–µ–º –ø–æ–±–µ–¥—É.")
    return res.status(200).send('ok')
  }

  if (command === '/buy' || command === '/—è –∫—É–ø–∏–ª') {
    session.relapses += 1
    session.messages = []
    await sendMessage(chatId, "üòî –ë—ã–≤–∞–µ—Ç. –ù–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —É–¥–µ—Ä–∂–∏–º—Å—è! –ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª(–∞).")
    session.awaitingAmount = true
    return res.status(200).send('ok')
  }

  if (command === '/stats') {
    await sendMessage(chatId, `üìä –¢—ã —É–¥–µ—Ä–∂–∞–ª—Å—è –æ—Ç ${session.totalSaved} –ø–æ–∫—É–ø–æ–∫\nüí∏ –ü–æ—Ç—Ä–∞—Ç–∏–ª: $${session.savedMoney.toFixed(2)}\nüòÖ –°–æ—Ä–≤–∞–ª—Å—è: ${session.relapses} —Ä–∞–∑(–∞)`)
    return res.status(200).send('ok')
  }

  // –µ—Å–ª–∏ –∂–¥—ë–º —Å—É–º–º—É –ø–æ—Å–ª–µ /buy
  if (session.awaitingAmount) {
    const amount = parseFloat(message.replace(/[^0-9.]/g, ''))
    if (!isNaN(amount)) {
      session.savedMoney += amount
      session.awaitingAmount = false
      await sendMessage(chatId, `üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª: $${amount.toFixed(2)}. –ë—É–¥–µ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!`)
    } else {
      await sendMessage(chatId, "‚ùì –Ø –Ω–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 35.99")
    }
    return res.status(200).send('ok')
  }

  // –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ ‚Äî –æ—Ç–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º
  const personaPrompt = personas[session.persona]
  if (session.messages.length === 0) {
    session.messages.push({ role: 'user', content: `–•–æ—á—É –∫—É–ø–∏—Ç—å: ${message}` })
  } else {
    session.messages.push({ role: 'user', content: message })
  }

  const fullPrompt = [
    { role: 'system', content: personaPrompt },
    ...session.messages
  ]

  const completion = await openai.chat.completions.create({
    model: "gpt-4o",
    messages: fullPrompt
  })

  const reply = completion.choices[0].message.content || "ü§î –ß—Ç–æ-—Ç–æ —è –∑–∞–¥—É–º–∞–ª—Å—è..."
  session.messages.push({ role: 'assistant', content: reply })

  await sendMessage(chatId, reply)
  res.status(200).send('ok')
}

async function sendMessage(chatId, text) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text })
  })
}
